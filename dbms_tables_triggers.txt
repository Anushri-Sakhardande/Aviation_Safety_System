create table AIRCRAFT(
		admin_id integer,
		aircraft_id int,
		type varchar(40),
		manufacturer varchar(25),
		mil_Com varchar(3),
		primary key(aircraft_id),
foreign key (admin_id) references Admin
);

	

create table REGISTRATION(
	admin_id integer,
registration varchar(15),
operator varchar(100),
	registration_id int,
	aircraft_id int,
	primary key(registration_id),
foreign key (aircraft_id) references AIRCRAFT,
foreign key (admin_id) references Admin
	);


create table INCIDENT(
accident_id int,
admin_id int,
accd_date date,
location  varchar(30),
fatalities int,
registration_id int,
cat varchar(10),
country varchar(25),
aircraft_id int,
foreign key (registration_id) references  REGISTRATION,
foreign key(aircraft_id) references AIRCRAFT,
foreign key (admin_id) references Admin,
primary key( accident_id));


create table REPORT(
    user_id integer,
    report_id integer,
    report_datetime timestamp,
    manufacturer varchar2(25),
    registration varchar2(15),
    type varchar2(40),
    mil_Com varchar2(3),
    accident_date date,
    operator varchar2(100),
    Fatalities int,
    location varchar2(30),
    country varchar2(25),
    cat varchar2(10),
accepted NUMBER(1),
    primary key(user_id, report_id),
    foreign key (user_id) references user_detail
);


create table Logrecord(
user_id integer, 
login timestamp,
primary key (user_id,login));

create table ADMIN(
user_id integer,
admin_id integer,
primary key(admin_id)
constraint fkey1 foreign key(user_id) references user_detail);

create table user_detail (
user_id integer,
passhash varchar(144),
name varchar(50),
phone integer,
points integer,
email varchar(320),
primary key(user_id)
);

********TRIGGERs***************

CREATE TRIGGER update_points_on_login
AFTER INSERT ON Log_record
FOR EACH ROW
BEGIN
    UPDATE user_detail
    SET points = points + 10
    WHERE user_id = :NEW.user_id;
END;

-- Trigger for report submission
CREATE TRIGGER update_points_on_report_submission
AFTER INSERT ON REPORT
FOR EACH ROW
BEGIN
    UPDATE user_detail
    SET points = points + 20
    WHERE user_id = :NEW.user_id;
END;
/

-- Trigger for accepted report
CREATE TRIGGER update_points_on_accepted_report
AFTER UPDATE ON REPORT
FOR EACH ROW
BEGIN
    IF :NEW.accepted = 1 THEN
        UPDATE user_detail
        SET points = points + 50
        WHERE user_id = :NEW.user_id;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER report_update_trigger
BEFORE UPDATE OF accepted ON report
FOR EACH ROW
DECLARE
    v_aircraft_id aircraft.aircraft_id%TYPE;
    v_registration_id registration.registration_id%TYPE;
    v_incident_id incident.accident_id%TYPE;
    v_admin_id CONSTANT NUMBER := 1; -- Admin ID is constant
BEGIN
    -- Check if the accepted column is updated to 1 from 0
    IF :new.accepted = 1 AND :old.accepted = 0 THEN

        -- Check if aircraft exists
        SELECT aircraft_id INTO v_aircraft_id
        FROM aircraft
        WHERE manufacturer = :new.manufacturer
        AND type = :new.type
        AND mil_com = :new.mil_com;

        -- If aircraft doesn't exist, generate a new aircraft_id
        IF v_aircraft_id IS NULL THEN
            SELECT MAX(aircraft_id) + 1 INTO v_aircraft_id FROM aircraft;
            INSERT INTO aircraft (aircraft_id, admin_id, type, manufacturer, mil_com)
            VALUES (v_aircraft_id, v_admin_id, :new.type, :new.manufacturer, :new.mil_com);
        END IF;

        -- Check if registration exists
        SELECT registration_id INTO v_registration_id
        FROM registration
        WHERE registration = :new.registration
        AND operator = :new.operator;

        -- If registration doesn't exist, generate a new registration_id
        IF v_registration_id IS NULL THEN
            SELECT MAX(registration_id) + 1 INTO v_registration_id FROM registration;
            INSERT INTO registration (registration_id, registration, admin_id, aircraft_id, operator)
            VALUES (v_registration_id, :new.registration, v_admin_id, v_aircraft_id, :new.operator);
        END IF;

        -- Check if incident exists
        SELECT accident_id INTO v_incident_id
        FROM incident
        WHERE accd_date = :new.accident_date
        AND location = :new.location
        AND fatalities = :new.fatalities
        AND cat = :new.cat
        AND country = :new.country;

        -- If incident doesn't exist, generate a new accident_id
        IF v_incident_id IS NULL THEN
            SELECT MAX(accident_id) + 1 INTO v_incident_id FROM incident;
            INSERT INTO incident (accident_id, admin_id, accd_date, location, fatalities, registration_id, cat, country, aircraft_id)
            VALUES (v_incident_id, v_admin_id, :new.accident_date, :new.location, :new.fatalities, v_registration_id, :new.cat, :new.country, v_aircraft_id);
        END IF;

        -- Log trigger execution
        INSERT INTO trigger_log (trigger_name, execution_timestamp)
        VALUES ('report_update_trigger', SYSTIMESTAMP);
    END IF;
END;
/

